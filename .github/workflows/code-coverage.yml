name: Code Coverage

on:
  pull_request:
    branches:
      - main

jobs:
  validador-cobertura-testes-70:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install ReportGenerator tool
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Add .dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests with coverage
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Convert to Cobertura format
        run: |
          reportgenerator \
            -reports:"**/coverage.cobertura.xml" \
            -targetdir:"coverlet/reports" \
            -reporttypes:Cobertura

      - name: Validate code coverage
        shell: bash
        run: |
          minCoverage=70
          coverageReportPath="coverlet/reports/Cobertura.xml"

          if [ ! -f "$coverageReportPath" ]; then
            echo "❌ Arquivo de cobertura não encontrado em $coverageReportPath"
            exit 1
          fi

          coverageLineRate=$(xmllint --xpath 'string(//coverage/@line-rate)' "$coverageReportPath")
          coveragePercentage=$(echo "$coverageLineRate * 100" | bc -l)
          coverageInt=${coveragePercentage%.*}

          if [ "$coverageInt" -lt "$minCoverage" ]; then
            echo "❌ Cobertura de código ${coveragePercentage}% está abaixo de ${minCoverage}%"
            exit 1
          else
            echo "✅ Cobertura de código ${coveragePercentage}% está acima de ${minCoverage}%"
          fi

      - name: Upload cobertura como artefato
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cobertura-report
          path: coverlet/reports/
